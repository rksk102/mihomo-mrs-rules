name: "Build MRS (keep directory structure, safe classical)"

on:
  workflow_dispatch:
    inputs:
      mihomo_url:
        description: "覆盖下载 URL（可选），默认从本仓库 tag=mihomo 下载 amd64v3 包"
        required: false
        type: string
      verify_sha256:
        description: "是否校验 SHA256（需 Release 提供 SHA256SUMS.txt）"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]
      output_dir:
        description: "输出目录（默认 mrs-rules）"
        required: false
        default: "mrs-rules"
        type: string
  push:
    branches: [ main ]
    paths:
      - "rulesets/**"

permissions:
  contents: write
  actions: write   # 允许触发 gen-readme-b.yml 的 workflow_dispatch

concurrency:
  group: build-mrs
  cancel-in-progress: true

env:
  TZ: Asia/Shanghai
  DEFAULT_MIHOMO_URL: https://github.com/${{ github.repository }}/releases/download/mihomo/mihomo-meta-linux-amd64v3.tar.gz
  DEFAULT_SHA256_URL: https://github.com/${{ github.repository }}/releases/download/mihomo/SHA256SUMS.txt
  DEFAULT_OUTPUT_DIR: mrs-rules

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare tools dir
        run: mkdir -p tools

      - name: Resolve output directory
        id: outdir
        shell: bash
        run: |
          if [ -n "${{ inputs.output_dir }}" ]; then
            echo "dir=${{ inputs.output_dir }}" >> "$GITHUB_OUTPUT"
          else
            echo "dir=${DEFAULT_OUTPUT_DIR}" >> "$GITHUB_OUTPUT"
          fi

      - name: Download mihomo tarball
        id: dl
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ inputs.mihomo_url != '' && inputs.mihomo_url || env.DEFAULT_MIHOMO_URL }}"
          echo "Download URL: $URL"
          curl -fSL "$URL" -o tools/mihomo.tar.gz
          echo "download_ok=true" >> "$GITHUB_OUTPUT"

      - name: Verify tarball SHA256 (optional)
        if: steps.dl.outputs.download_ok == 'true' && inputs.verify_sha256 == 'true'
        shell: bash
        run: |
          set -euo pipefail
          curl -fSL "$DEFAULT_SHA256_URL" -o tools/SHA256SUMS.txt
          calc=$(sha256sum tools/mihomo.tar.gz | awk '{print $1}')
          echo "Calculated SHA256: $calc"
          if ! awk -v f="mihomo-meta-linux-amd64v3.tar.gz" -v c="$calc" '$2==f && $1==c {ok=1} END{exit !(ok)}' tools/SHA256SUMS.txt; then
            echo "::error::SHA256 mismatch for mihomo tar.gz"
            grep 'mihomo-meta-linux-amd64v3.tar.gz' tools/SHA256SUMS.txt || true
            exit 1
          fi

      - name: Extract mihomo and make executable
        shell: bash
        run: |
          set -euo pipefail
          tar -xzf tools/mihomo.tar.gz -C tools/
          if [ -f tools/CrashCore ]; then
            mv tools/CrashCore tools/mihomo
          fi
          if [ ! -f tools/mihomo ]; then
            echo "::error::mihomo binary not found in tarball."
            ls -l tools
            exit 1
          fi
          chmod +x tools/mihomo
          tools/mihomo -v || true

      - name: Convert TXT to MRS (preserve structure, safe classical)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          OUTPUT_DIR="${{ steps.outdir.outputs.dir }}"
          mkdir -p "$OUTPUT_DIR"

          decide_behavior() {
            local f="$1"
            local n_total=0 n_domain=0 n_ip=0 n_classical=0 line
            while IFS= read -r line; do
              line="${line%%#*}"; line="${line%%!*}"
              line="$(echo "$line" | sed 's/^[[:space:]]\+//; s/[[:space:]]\+$//')"
              [ -z "$line" ] && continue
              n_total=$((n_total+1))
              if echo "$line" | grep -Eq '^[A-Z-]+,.*$'; then
                n_classical=$((n_classical+1)); continue
              fi
              if echo "$line" | grep -Eq '^([A-Za-z0-9*-]+\.)+[A-Za-z0-9-]+$|^\+\.[A-Za-z0-9.-]+$|^\*[A-Za-z0-9.-]+$'; then
                n_domain=$((n_domain+1)); continue
              fi
              if echo "$line" | grep -Eq '^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$|^[0-9A-Fa-f:]+(/[0-9]{1,3})?$'; then
                n_ip=$((n_ip+1)); continue
              fi
            done < "$f"

            if [ "$n_classical" -gt 0 ] && [ "$n_classical" -ge "$n_domain" ] && [ "$n_classical" -ge "$n_ip" ]; then
              echo classical; return
            fi
            if [ "$n_domain" -ge "$n_ip" ]; then
              echo domain; return
            else
              echo ipcidr; return
            fi
          }

          filter_classical() {
            local in="$1" out="$2"
            awk -F',' '
              BEGIN{OFS=","}
              /^[[:space:]]*#/ {next}
              /^[[:space:]]*$/ {next}
              {
                gsub(/^[[:space:]]+|[[:space:]]+$/,"",$1);
                t=$1
                if (t=="DOMAIN" || t=="DOMAIN-SUFFIX" || t=="DOMAIN-KEYWORD" || t=="DOMAIN-REGEX" || t=="IP-CIDR" || t=="IP-CIDR6" || t=="SRC-IP-CIDR") {
                  print $0
                }
              }
            ' "$in" > "$out"
          }

          converted=0
          while IFS= read -r -d '' in_file; do
            rel="${in_file#rulesets/}"
            out_file="${OUTPUT_DIR}/${rel%.txt}.mrs"
            mkdir -p "$(dirname "$out_file")"

            beh="$(decide_behavior "$in_file")"

            if [ "$beh" = "classical" ]; then
              tmp="$(mktemp)"
              filter_classical "$in_file" "$tmp"
              if [ ! -s "$tmp" ]; then
                echo "Skip (empty after classical filter): $in_file"
                # 若已有旧产物则删除，避免残留
                if [ -f "$out_file" ]; then
                  rm -f "$out_file"
                  echo "Removed stale output: $out_file"
                fi
                rm -f "$tmp"
                continue
              fi
              echo "Convert (classical filtered): $in_file -> $out_file"
              tools/mihomo convert-ruleset classical text "$tmp" "$out_file" || { echo "::error::Convert failed: $in_file"; exit 1; }
              rm -f "$tmp"
            elif [ "$beh" = "domain" ]; then
              echo "Convert (domain): $in_file -> $out_file"
              tools/mihomo convert-ruleset domain text "$in_file" "$out_file" || { echo "::error::Convert failed: $in_file"; exit 1; }
            else
              echo "Convert (ipcidr): $in_file -> $out_file"
              tools/mihomo convert-ruleset ipcidr text "$in_file" "$out_file" || { echo "::error::Convert failed: $in_file"; exit 1; }
            fi

            converted=$((converted+1))
          done < <(find rulesets -type f -name "*.txt" -print0)

          if [ "$converted" -eq 0 ]; then
            echo "No convertible .txt found (after filtering)."
          fi

      - name: Cleanup stale MRS files (no source TXT)
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.outdir.outputs.dir }}"
          [ -d "$OUT" ] || exit 0
          removed=0
          while IFS= read -r -d '' mrs; do
            rel="${mrs#$OUT/}"
            src="rulesets/${rel%.mrs}.txt"
            if [ ! -f "$src" ]; then
              echo "Remove stale: $mrs (no source: $src)"
              rm -f "$mrs"
              removed=$((removed+1))
            fi
          done < <(find "$OUT" -type f -name '*.mrs' -print0)
          find "$OUT" -type d -empty -delete || true
          echo "Stale removed: $removed"

      - name: Commit and push MRS outputs (with rebase retry)
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.outdir.outputs.dir }}"
          if [[ -z $(git status --porcelain "$OUT") ]]; then
            echo "No changes in $OUT/"
            exit 0
          fi
          git config user.name 'GitHub Actions Bot'
          git config user.email 'actions@github.com'
          git add -A "$OUT/"
          git commit -m "chore(mrs): sync outputs with rulesets (cleaned stale + converted)"

          BRANCH="${GITHUB_REF_NAME:-main}"
          if git push origin "$BRANCH"; then
            exit 0
          fi
          echo "Non-fast-forward on MRS push, rebasing and retrying..."
          git pull --rebase origin "$BRANCH"
          git push origin "$BRANCH"

      - name: Trigger gen-readme-b workflow
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          WORKFLOW_FILE: gen-readme-b.yml
          REF: ${{ github.ref_name || 'main' }}
        run: |
          set -euo pipefail
          echo "Dispatching ${WORKFLOW_FILE} on ${REPO}@${REF} ..."
          curl -sS -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/repos/${REPO}/actions/workflows/${WORKFLOW_FILE}/dispatches" \
            -d @- <<JSON
          {
            "ref": "${REF}",
            "inputs": {
              "ref": "${REF}",
              "cdn": "jsdelivr",
              "validate_mode": "jsdelivr",
              "fail_on_broken": "false",
              "check_timeout": "6",
              "check_retries": "0",
              "prefer_cdn": "jsdelivr"
            }
          }
          JSON
          echo "Dispatched gen-readme-b."